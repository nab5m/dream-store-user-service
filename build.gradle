plugins {
	id("java")
	id("org.springframework.boot") version "3.1.3"
	id("io.spring.dependency-management") version "1.1.3"
	id("org.asciidoctor.jvm.convert") version "3.3.2"
}

group = "com.junyoung-goat.dream-store.user"
version = "0.0.1-SNAPSHOT"

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

ext {
	snippetsDir = file("build/generated-snippets")
	set('springCloudAwsVersion', "3.0.2")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	asciidoctorExt
}

repositories {
	mavenCentral()
}



dependencies {
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-data-jpa")
	implementation("org.flywaydb:flyway-core")
	implementation("org.flywaydb:flyway-mysql")
	runtimeOnly("com.h2database:h2")
	runtimeOnly("com.mysql:mysql-connector-j")
	implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
	annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")
	annotationProcessor("jakarta.annotation:jakarta.annotation-api")
	annotationProcessor("jakarta.persistence:jakarta.persistence-api")
	implementation("org.springframework.boot:spring-boot-starter-hateoas")
	implementation("org.springframework.boot:spring-boot-starter-oauth2-authorization-server")
	implementation("org.springframework.boot:spring-boot-starter-security")
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0")
	compileOnly("org.projectlombok:lombok")
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	annotationProcessor("org.projectlombok:lombok")
	asciidoctorExt("org.springframework.restdocs:spring-restdocs-asciidoctor")
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
	testImplementation("org.springframework.security:spring-security-test")
	implementation('io.jsonwebtoken:jjwt-api:0.11.5')
	runtimeOnly('io.jsonwebtoken:jjwt-impl:0.11.5')
	runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.5')
	implementation("org.springframework.boot:spring-boot-starter-data-redis")
	testImplementation("it.ozimov:embedded-redis:0.7.3") { exclude group: "org.slf4j", module: "slf4j-simple" }
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-sqs'
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-sns'
}

dependencyManagement {
	imports {
		mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
	}
}

tasks.test {
	useJUnitPlatform()
	outputs.dir snippetsDir
}

tasks.asciidoctor {
	configurations 'asciidoctorExt'
	doLast {
		copy {
			from(file("build/docs/asciidoc"))
			into(file("src/main/resources/static/docs"))
		}
	}
}

tasks.bootBuildImage {
	imageName = "${System.getenv("dockerImageName")}"
	tags = ["${System.getenv("dockerImageName")}:${version}", "${System.getenv("dockerImageName")}:latest"]
	createdDate = "now"
	publish = true
	docker {
		publishRegistry {
			username = System.getenv("dockerUsername")
			password = System.getenv("dockerPassword")
		}
	}
}
